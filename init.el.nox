;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                              MiniMacs - Minimal Emacs                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                               ENCONDING SETTINGS                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq locale-coding-system 'utf-8)	        ; utf-8 setting
(set-terminal-coding-system 'utf-8)		; utf-8 setting
(set-keyboard-coding-system 'utf-8)		; utf-8 setting
(set-selection-coding-system 'utf-8)		; utf-8 setting
(prefer-coding-system 'utf-8)		        ; utf-8 setting

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                STARTUP SETTINGS                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq-default
 inhibit-startup-screen t                         ; Disable start-up screen
 inhibit-startup-message t                        ; Disable startup message
 inhibit-startup-echo-area-message t              ; Disable initial echo message
 initial-scratch-message "")                      ; Empty the initial *scratch* buffer

(menu-bar-mode -1)   			        ; Disable menu-bar

(fset 'yes-or-no-p 'y-or-n-p)		        ; Easier Options

(setq initial-major-mode 'org-mode)	        ; Start with org-mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)	; Auto-Fill

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  UI SETTINGS                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq frame-title-format "%b : %f") 	        ; file : path

(require 'linum)
(setq linum-format 'dynamic)		; right-aligned numbers

(setq-default cursor-type 'bar)	        	; Enable bar cursor
(setq line-number-mode t)		        ; Enable line-number-mode
(setq column-number-mode t)		        ; Enable column-number-mode

(set-face-attribute 'fringe nil :background "#696969")   ; fringe | buffer
(add-to-list 'default-frame-alist '(left-fringe . 2))    ; left fringe 
(add-to-list 'default-frame-alist '(right-fringe . 0))   ; right fringe

(setq scroll-step 1 scroll-conservatively 10000)

(set-face-attribute 'mode-line nil
                      :background "#353644"
                      :foreground "white"
                      :box '(:line-width 8 :color "#353644")
                      :overline nil
                      :underline nil)

  (set-face-attribute 'mode-line-inactive nil
                      :background "#565063"
                      :foreground "white"
                      :box '(:line-width 8 :color "#565063")
                      :overline nil
                      :underline nil)

'(:eval (propertize
         " " 'display
         `((space :align-to (- (+ right right-fringe right-margin)
                               ,(+ 3 (string-width mode-name)))))))

(define-minor-mode minor-mode-blackout-mode
  "Hides minor modes from the mode line."
  t)

(catch 'done
  (mapc (lambda (x)
          (when (and (consp x)
                     (equal (cadr x) '("" minor-mode-alist)))
            (let ((original (copy-sequence x)))
              (setcar x 'minor-mode-blackout-mode)
              (setcdr x (list "" original)))
            (throw 'done t)))
        mode-line-modes))

